#!/usr/bin/php -q
<?php

/**
 *  @file
 *  A script to back files and directories up to an S3 bucket.
 */

/**
 *  This script is designed to back files and directories up to an 
 *  Amazon S3 bucket.
 *
 *  Written by Chris McDermott, chris@mcvine.net
 *    v0.1 02/15/2013
 *
 *  @param config (-f)
 *    Specify the software platform to check. Acceptable values are
 *    "wordpress", "drupal6", and "drupal7".
 *  @param debug (-d)
 *    Optionally enable extra debugging statements.
 *
 *  @return
 *    Returns true if no errors were encountered, false otherwise.
 */

putenv('TZ=America/Denver');
$debug = 0;
$logfile = './log';
require_once('/usr/local/aws/sdk/sdk.class.php');

// Start parsing arguments
$options = getopt('f:dh');
if (isset($options['h'])) { usage(); };
if (isset($options['d'])) { $debug = 1; }
if (!isset($options['f'])) { 
  log_this('ERROR', '-f option is required.'); 
  usage(); 
}

$sources = read_config($options['f']);
foreach($sources as $source) {
  process_source($source);
}




/**
 *  Processes a source.
 */
function process_source ($source) {
  $s3options = array(
    'key' => $source['AccessKey'],
    'secret' => $source['SecretAccessKey'],
  );
  $bucketlist = get_bucket_contents($source['Bucket'], $source['Path'], $s3options);
  $s3 = new AmazonS3($s3options);
  foreach ($source['Files'] as $file) {
    $name = strip_path($file);
    if (is_file($file)) {
      $search_result = array_search($source['Path'] . "/" . $name, $bucketlist);
      if ($search_result === false) {
        upload_file($s3, $source['Bucket'], $source['Path'], $file);
      } else {
        unset($bucketlist[$search_result]);
      }
    } else if (is_dir($file)) {
      $dh = opendir($file);
      while (false !== ($entry = readdir($dh))) {
        if ($entry != "." && $entry != "..") {
          $fullfile = $file . '/' . $entry;
          $name = strip_path($file);
          $search_result = array_search($source['Path'] . "/" . $entry, $bucketlist);
          if ($search_result === false) {
            print "Uploading $fullfile\n";
            upload_file($s3, $source['Bucket'], $source['Path'], $fullfile);
          } else {
            unset($bucketlist[$search_result]);
          }
        }
      }
      closedir($dh);
    }
    
    # sometimes an empty element gets in there, so remove it
    if ($bucketlist[0] === "") {
      unset($bucketlist[0]);
    }
    
    $delete_options = array();
    $delete_options['objects'] = array();
    foreach ($bucketlist as $filename) {
      array_push($delete_options['objects'], array(
        'key' => $filename,
      ));
    }
    $delete_response = $s3->delete_objects($source['Bucket'], $delete_options);
  }
}

/**
  *
  */
function get_bucket_contents ($bucket, $path, $s3options) {
  $s3 = new AmazonS3($s3options);
  $complete = false;
  $objects = array();
  $list_options = array(
    'prefix' => $path,
  );
  while (!$complete) {
    $response = $s3->list_objects($bucket, $list_options);
    #print_r($response);
    foreach ($response->body->Contents as $object) {
      $fullname = "$object->Key";
      #$name = strip_path("$fullname");
      #array_push($objects, $name);
      if ($fullname === $path . "/") {
        continue;
      } else {
        array_push($objects, $fullname);
      }
    }
    if ($response->body->IsTruncated !== 'false') {
      $complete = true;
    }
  }
  return $objects;
}

/**
 *  Upload a file to S3.
 */
function upload_file ($s3, $bucket, $path, $file) {
  $upload_options = array(
    'fileUpload' => $file,
    'acl' => AmazonS3::ACL_PRIVATE,
  );
  $name = strip_path($file);
  $upload_response = $s3->create_mpu_object($bucket, $path.'/'.$name, $upload_options);
  print "upload response:\n";
  print_r($upload_response);
  print "\n";
  if($upload_response->isOK()) {
    log_this('DEBUG', "Successfully uploaded $file.");
  } else {
    print_r($upload_response->body);
    log_this('ERROR', "Failed to upload $file:\n\t" . $upload_response->body->Message);
  }
}

/**
 *  Strips the path out of a filename.
 */
function strip_path ($file) {
  if (preg_match('/\/([^\/]*)$/', $file, $matches)) {
    #log_this('DEBUG', "Stripping $file down to just $matches[1].");
    return $matches[1];
  } else {
    return $file;
  }
}

/**
 *  Reads the config file.
 *
 *  Config file must exist (obviously!) and must be formatted correctly, or
 *  this function will return an error. 
 *
 *  @param string $file
 *    The config file to read.
 *
 *  @return
 *    Returns array of backup sources if successful, empty array otherwise.
 */
function read_config ($file) {
  $sources = array();
  if (!file_exists($file)) {
    log_this('ERROR', "Config file $file does not exist.");
    exit(2);
  }
  $fh = fopen($file, 'r');
  if ($fh) {
    while (($buffer = fgets($fh)) !== false) {
      if (preg_match('/^Access Key/', $buffer)) {
        continue;
      } else if (preg_match('/^---------------------/', $buffer)) {
        continue;
      } else if (preg_match('/(.*)::(.*)::(.*)::(.*)::(.*)/', $buffer, $matches)) {
        $source = array();
        $source = array(
          'AccessKey' => $matches[1],
          'SecretAccessKey' => $matches[2],
          'Bucket' => $matches[3],
          'Path' => $matches[4],
          'Files' => explode(',', $matches[5]),
        );
        array_push($sources, $source);
      } else {
        log_this('ERROR', "Could not parse this line in the config:\n\t$buffer");
      }
    }
  } else {
    log_this('ERROR', "Could not open config file: $file.");
  }
  return $sources;
}

/**
 *  Logs a message.
 *  
 *  Supports various message types, including debug, error, and info. Debug 
 *  messages are printing to STDOUT, while error messages are printed to STDOUT 
 *  and the log file, and info messages are only printed to the log file.
 *
 *  @param string $type
 *    "debug" and "error" are handled specially, everything else ("info", for
 *    instance) is just written to the log file.
 *
 *  @param string $message
 *    The message to log. Newline is appended to the end automatically, so
 *    there's no need to include it.
 */
function log_this ($type, $message) {
  global $logfile, $debug;
  $handle = fopen($logfile, 'a');
  $timestamp = date('Y-m-d H:i') . "\t";
  if ($type == 'ERROR') {
    echo "ERROR: $message\n";
    fwrite($handle, $timestamp . $message . "\n");
  } else if ($type == 'DEBUG') {
    if ($debug == 1) {
      echo "DEBUG: $message\n";
    }
  } else {
    fwrite($handle, $timestamp . $message . "\n");
  }
  fclose($handle);
}


/**
 *  Prints usage information and argument requirements.
 */
function usage () {
  echo "Usage: s3backup -f <config file> [-d]\n";
  echo "  -f filename                               required\n";
  echo "  -d                                        optional, toggles debug\n\n";
  exit (2);
}

?>
